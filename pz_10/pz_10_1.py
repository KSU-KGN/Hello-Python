"""
Создать не менее двух дескрипторов для атрибутов классов,
которые вы создали ранее в ДЗ
class NaturalNumber и class AsphaltThickness.
На основе Практического задания 7_2:
Реализовать класс Road (дорога), в котором определить атрибуты:
length (длина), width (ширина).
Значения данных атрибутов должны передаваться при создании экземпляра класса.
Атрибуты сделать защищенными.
Определить метод расчета массы асфальта,
необходимого для покрытия всего дорожного полотна.
Использовать формулу: длинаширинамасса асфальта для покрытия одного кв метра
дороги асфальтом, толщиной в 1 см*число см толщины полотна.
Проверить работу метода.
Например: 20м*5000м*25кг*5см = 12500 т
!!! Сантиметры переводим в метры и получаем 125 тонн !!!
"""
class NaturalNumber:
    """
    Класс NaturalNumber помогает сделать атрибуты дескрипторами,
    с заданными свойсвами: атрибуты должны быть натуральными числами
    """
    def __set__(self, instance, value):
        """
        Переопределение присвоения.
        Метод валидации значения атрибута
        @param instance: экземпляр класса (у нас в примере Road)
        @param value: присваемое значение атрибуту, если проходит валидация
        """
        if value <= 0:
            raise ValueError(f'Число {self.name} должно быть натуральным!\n'
                             f'{value} - не натуральное число.')
        instance.__dict__[self.name] = value

    def __set_name__(self, owner, name):
        """
        Метод заменяет инициализацию, чтобы не передавать в скобках параметры
        (имена атрибутов-дескрипторов)
        @param owner: владелец атрибута (у нас в примере Road)
        @param name: имя атрибута (у нас в примере _length и _width)
        """
        self.name = name

class AsphaltThickness:
    """
    Класс AsphaltThickness помогает сделать атрибуты дескрипторами,
    с заданными свойсвами: атрибут должен быть целым числом
    от 1 до 10 см включительно
    """
    def __set__(self, instance, value):
        """
        Переопределение присвоения.
        Метод валидации значения атрибута
        @param instance: экземпляр класса (у нас в примере Road)
        @param value: присваемое значение атрибуту, если проходит валидация
        """
        try:
            value = int(value)
        except ValueError:
            print("Толщина полотна асфальта должна быть целым числом!")
            exit(0)
        if value not in range(1, 11):
            raise ValueError('Толщина полотна асфальта должна быть '
                             'не менее 1 см и не более 10 см!')
        instance.__dict__[self.name] = value / 100.0

    def __set_name__(self, owner, name):
        """
        Метод заменяет инициализацию, чтобы не передавать в скобках параметры
        (имена атрибутов-дескрипторов)
        @param owner: владелец атрибута (у нас в примере Road)
        @param name: имя атрибута (у нас в примере thickness)
        """
        self.name = name

class Road:
    """
    Класс Road (дорога) имеет защищенные атрибуты:
    length (длина), width (ширина).
    Метод calc_mass: расчет массы асфальта, необходимого для покрытия всего
                     дорожного полотна.
    """
    weight = 25
    thickness = AsphaltThickness()
    _length = NaturalNumber()
    _width = NaturalNumber()

    def __init__(self, user_thickness, user_length, user_width):
        """
        Метод __init__ атрибуты класса передаются при создании экземпляра класса
        @param user_length: length (длина)
        @param user_width: width (ширина)
        """
        self.thickness = user_thickness
        self._length = user_length
        self._width = user_width

    def calc_mass(self):
        """
        Метод calc_mass - метод расчета массы асфальта, необходимого
        для покрытия всего дорожного полотна.
        @return: масса асфальта, необходимого для покрытия всего
        дорожного полотна в кг
        """
        return self._length * self._width * Road.weight * self.thickness

thickness = input('Введите число см толщины полотна асфальта\n'
                  '(целое число от 1 до 10 см включительно): ')
length = 5000
width = -20 #необходимо убрать минус, тогда число будет натуральным
user_class = Road(thickness, length, width)
print(f'Длина дороги {length} м, ширина дороги {width} м\nМасса асфальта для '
      f'покрытия одного кв метра дороги асфальтом {user_class.weight} кг\n'
      f'Число см толщины полотна {user_class.thickness} м')
result = user_class.calc_mass()
print(f'Масса асфальта, необходимого для покрытия всего дорожного полотна\n'
      f'{result} кг или {result / 1000} т\n')
