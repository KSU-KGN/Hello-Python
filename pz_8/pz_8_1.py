"""
Задание 1.
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса
(метод init()), который должен принимать данные (список списков)
для формирования матрицы. [[], [], []]
Следующий шаг — реализовать перегрузку метода str() для вывода матрицы
в привычном виде.
Далее реализовать перегрузку метода add() для реализации операции
сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.
Пример:
1 2 3   1 2 3
4 5 6   4 5 6
7 8 9   7 8 9
Сумма матриц:
 2  4  6
 8 10 12
14 16 18
"""
class Matrix:
    """
    Класс Matrix (матрица).
    """
    def __init__(self, list_matrix):
        """
        Перегружает конструктор класса (метод init()):
        @param list_matrix: принимает данные (список списков)
                            для формирования матрицы. [[], [], []]
        """
        self.data_matrix = list_matrix

    def __str__(self):
        """
        Перегружает метод str() для вывода матрицы в привычном виде.
        @return: результат - строка для вывода матрицы в привычном виде
        """
        result = ''
        for item_str in self.data_matrix:
            result += ''.join(f'{item:3}' for item in item_str) + '\n'
        return result

    def __add__(self, other):
        """
        Перегружает метод add() для реализации операции
        сложения двух объектов класса Matrix (двух матриц).
        @return: результат сложения - новая матрица
        """
        result = self.data_matrix
        for row, item_str in enumerate(other.data_matrix):
            for col, item in enumerate(item_str):
                result[row][col] += item
        return Matrix(result)

user_matrix_1 = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(f'Матрица 1:\n{user_matrix_1}')
user_matrix_2 = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(f'Матрица 2:\n{user_matrix_2}')
print(f'Сумма матриц:\n{user_matrix_1 + user_matrix_2}')
