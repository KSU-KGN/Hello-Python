"""
1) Создать класс TrafficLight (светофор) и определить у него один атрибут
color (цвет) и метод running (запуск). Атрибут реализовать как приватный.
В рамках метода реализовать переключение светофора в режимы:
красный, желтый, зеленый.
Продолжительность первого состояния (красный) составляет 7 секунд,
второго (желтый) — 2 секунды, третьего (зеленый) — на ваше усмотрение.
Переключение между режимами должно осуществляться только в указанном порядке
(красный, желтый, зеленый).
Проверить работу примера, создав экземпляр и вызвав описанный метод.
Задачу можно усложнить, реализовав проверку порядка режимов,
и при его нарушении выводить соответствующее сообщение и завершать скрипт.
"""
from time import sleep
from sys import exit

class TrafficLight:
    """
    Класс TrafficLight (светофор) имеет один приватный атрибут color (цвет)
    Работа светофора только в указанном порядке (красный, желтый, зеленый)
    Основные методы:
    метод auto_running: простой метод
    метод running (запуск): усложненный метод
    Вспомогательные методы:
    метод timer: визуализация времени работы режима светофора
    """
    __color = {'красный': 7, 'жёлтый': 2, 'зелёный': 5}

    def __init__(self):
        self.color = None

    @staticmethod
    def auto_running():
        """
        В методе реализована правильная автоматическая работа светофора
        """
        for key, value in TrafficLight.__color.items():
            print(f'Горит {key}')
            TrafficLight.timer(value)

    def running(self, user_color, is_exit):
        """
        Метод running (запуск) - переключение светофора в режимы:
        красный, желтый, зеленый.
        С проверкой порядка режимов, и при его нарушении выводится
        соответствующее сообщение (а если параметр is_exit == True, тогда
        cкрипт завершается после вывода сообщения)
        @param user_color: режим - цвет сигнала светофора
        @param is_exit: признак завершения работы
        """
        if self.color is None:
            flag = True
            print(f'Светофор не горит, вы просите зажечь {user_color}')
        else:
            flag = False
            print(f'Горит {self.color}, вы просите зажечь {user_color}')
        for key, value in TrafficLight.__color.items():
            if flag:
                if key == user_color:
                    self.color = user_color
                    print(f'Горит {key}')
                    TrafficLight.timer(value)
                else:
                    print(f'После {self.color} может быть только {key}!')
                    if is_exit:
                        print('Ошибка! Завершаем работу.')
                        exit(1)
                    else:
                        print('Продолжаем настройку работы светофора')
                return
            if key == self.color:
                flag = True
        if flag:
            print('Работа светофора завершена! Зелёный - последний сигнал.')
            if is_exit:
                print('Ошибка! Завершаем работу.')
                exit(1)
            else:
                print('Продолжаем настройку работы светофора')

    @staticmethod
    def timer(count):
        """
        В методе реализована визуализация времени работы режима светофора
        @param count: время работы режима светофора
        """
        for i in range(count):
            print(f'{count - i} ', end='')
            sleep(1)
        print()

my_class_1 = TrafficLight()
print('Демонстрация правильной автоматической работы светофора\n'
      'Самый простой метод.')
my_class_1.auto_running()
my_class_2 = TrafficLight()
print('\nДемонстрация работы светофора с проверкой порядка режимов.\n'
      'При его нарушении выводится соответствующее сообщение и '
      'настройка работы светофора продолжается.\nУсложненный метод 1.')
my_class_2.running('красный', False)
my_class_2.running('зелёный', False)
my_class_2.running('жёлтый', False)
my_class_2.running('зелёный', False)
my_class_2.running('красный', False)
my_class_3 = TrafficLight()
print('\nДемонстрация работы светофора с проверкой порядка режимов.\n'
      'При его нарушении выводится соответствующее сообщение и завершается '
      'скрипт.\nУсложненный метод 2.')
my_class_3.running('красный', True)
my_class_3.running('зелёный', True)
my_class_3.running('жёлтый', True)
