"""
Задание 2.
Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка (Cell).
В его конструкторе инициализировать параметр (quantity),
соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
соответственно.
Сложение. Объединение двух клеток.
При этом число ячеек общей клетки должно равняться сумме ячеек исходных
двух клеток.
Вычитание. Участвуют две клетки.
Операцию необходимо выполнять только если разность количества ячеек двух клеток
больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих
двух клеток.
Деление. Создается общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества
ячеек этих двух клеток.
** - По желанию: В классе необходимо реализовать метод make_order(),
принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида **\n\n***...,
где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все
оставшиеся.
"""
class Cell:
    """
    Класс Клетка (Cell) для работы с органическими клетками, состоящими из ячеек
    """
    def __init__(self, quantity):
        """
        Конструктор инициализирует параметр (quantity)
        @param quantity: количество ячеек клетки (целое число)
        """
        try:
            self.quantity = int(quantity)
        except ValueError:
            print("Количество ячеек клетки должно быть целым числом!")

    def __add__(self, other):
        """
        Метод перегрузки арифметического оператора сложения (add()).
        Объединение двух клеток.
        @param other: кол-во ячеек второй клетки
        @return: число ячеек общей клетки равняется сумме ячеек исходных
                 двух клеток.
        """
        return self.quantity + other.quantity

    def __sub__(self, other):
        """
        Метод перегрузки арифметического оператора вычитания (sub()).
        Участвуют две клетки.
        @param other: кол-во ячеек второй клетки
        @return: разность количества ячеек двух клеток, если она больше нуля,
                 иначе соответствующее сообщение
        """
        result = self.quantity - other.quantity
        if result > 0:
            return result
        return "Разность отрицательная, поэтому операция не выполняется"

    def __mul__(self, other):
        """
        Метод перегрузки арифметического оператора умножения (mul()).
        Создается общая клетка из двух.
        @param other: кол-во ячеек второй клетки
        @return: число ячеек общей клетки определяется как произведение
        количества ячеек этих двух клеток.
        """
        return self.quantity * other.quantity

    def __truediv__(self, other):
        """
        Метод перегрузки арифметического оператора деления (truediv()).
        Создается общая клетка из двух.
        @param other: кол-во ячеек второй клетки
        @return: число ячеек общей клетки определяется как целочисленное деление
        количества ячеек этих двух клеток.
        """
        return self.quantity // other.quantity

    def make_order(self, count):
        """
        Метод принимает экземпляр класса и количество ячеек в ряду.
        Данный метод позволяет организовать ячейки по рядам.
        @param count: количество ячеек в ряду
        @return: строка вида ***\n***\n**...,
        где количество ячеек между \n равно переданному аргументу.
        Если ячеек на формирование ряда не хватает, то в последний ряд
        записываются все оставшиеся.
        """
        result = ''
        for i in range(self.quantity // count):
            result += f'{"*" * count}\n'
        result += '*' * (self.quantity % count)
        return result
"""
print("Создаем объекты клеток")
cell0 = Cell("error")
cell1 = Cell(30)
cell2 = Cell(25)
cell3 = Cell(10)
cell4 = Cell(15)
print()
print("Складываем")
print(cell1 + cell2)
print()
print("Вычитаем")
print(cell2 - cell1)
print(cell4 - cell3)
print()
print("Умножаем")
print(cell2 * cell1)
print()
print("Делим")
print(cell1 / cell2)
print()
print("Организация ячеек по рядам")
print(cell1.make_order(5))
print(cell2.make_order(10))
"""